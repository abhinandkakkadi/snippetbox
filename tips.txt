CREATE USER 'web'@'localhost';
GRANT SELECT, INSERT, UPDATE, DELETE ON snippetbox.* TO 'web'@'localhost';
-- Important: Make sure to swap 'pass' with a password of your own choosing.
ALTER USER 'web'@'localhost' IDENTIFIED BY 'pass';

// grant permission and give it a password
CREATE USER 'test_web'@'localhost';
GRANT CREATE, DROP, ALTER, INDEX, SELECT, INSERT, UPDATE, DELETE ON test_snippetbox.* TO 'test_web'@'localhost';

ALTER USER 'test_web'@'localhost' IDENTIFIED BY 'pass';


 - create and give permission to new user



DB.Query() is used for SELECT queries which return multiple rows.
DB.QueryRow() is used for SELECT queries which return a single row.
DB.Exec() is used for statements which don’t return rows (like INSERT and DELETE).


WHEN USING CUSTOM TEMPLATE FUNCTION - CALLING FUNCTION FROM PARSED TEMPLATE


“<time>{{.Created | humanDate | printf "Created: %s"}}</time>” - we can do like this where humanDate is the custom function


ALICE middleware - middleware chain can be assigned to a variable 
“myChain := alice.New(myMiddlewareOne, myMiddlewareTwo)
myOtherChain := myChain.Append(myMiddleware3)
return myOtherChain.Then(myHandler)”


TLS CERTIFICATE
for production - use Let's encrypt to create TLS certificate
for development - use a self signed certificate, but it's not cryptographically signed by a trusted certificate authority
command to generate self signed RSA key pair - "go run /usr/local/go/src/crypto/tls/generate_cert.go --rsa-bits=2048 --host=localhost"
both private and public key are PEM encoded, which is standard format used by most TLS implementation
so from this we go a TLC certificate and a corresponding private key



Testing commands

 - go test ./cmd/web
 - go test -v ./cmd/web  - verbose
 - go test -v -run="^TestPing$" ./cmd/web/ - test a specific function based on a regular expression
 - go test -v -run="^TestHumanDate$/^UTC$" ./cmd/web - test a specific sub test
 - go test -v -skip="^TestHumanDate$" ./cmd/web/ - skip a test
 - go test -count=1 ./cmd/web - test using non cached test cases.  count=1 ensure it will neither read or write the test
 - go clean -testcache - clear cached results
 - go test -failfast ./cmd/web - stop running test after first failure
 - go test -parallel=4 ./... - define how many test can run in parallel
 - go test -race ./cmd/web/ - check for race condition is tests

 go ignore director with name "testdata", or starting with . or _ from compiling